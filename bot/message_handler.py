import datetime
import traceback
from telebot.async_telebot import AsyncTeleBot
from my_utils.helpers import add_new_weight_change, find_categories_fuzzy, find_user_with_correct_state, get_random_weight, notify_others_about_product, send_product_summary, start_adding_food, check_user_state
from markups import back_skip_markup, create_product_markup, start_markup, drop_markup, admin_markup
from my_utils.database import read_json, write_json
from callbacks import calendar, calendar_1
from event_handlers import products_stream, interactive_state



async def handle_messages(bot: AsyncTeleBot):
    from my_utils.data_loaders import config_data
    from my_utils.database import load_storage_tmp, save_storage_tmp
    from my_utils.helpers import SEPARATOR
    @bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥")
    @check_user_state(bot)
    async def go_back(message):
        try:
            user_data = read_json(config_data['users'])[str(message.chat.id)]
            previous_state = user_data.get("state", "start")

            if previous_state == "waiting_for_name":
                user_data['state']="start"
                write_json(config_data['users'], user_data)
                await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=start_markup)
            elif previous_state == "waiting_for_weight":
                user_data['state']="waiting_for_name"
                write_json(config_data['users'], user_data)
                await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:", reply_markup=back_skip_markup)
            elif previous_state == "waiting_for_tare_weight":
                user_data['state']="waiting_for_weight"
                write_json(config_data['users'], user_data)
                await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞ (–≥—Ä–∞–º–º—ã):", reply_markup=back_skip_markup)
            elif previous_state == "waiting_for_source":
                user_data['state']="waiting_for_tare_weight"
                write_json(config_data['users'], user_data)
                await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å —Ç–∞—Ä—ã (–≥—Ä–∞–º–º—ã):", reply_markup=back_skip_markup)
            elif previous_state == "waiting_for_manufacture_date":
                user_data['state']="waiting_for_source"
                write_json(config_data['users'], user_data)
                await bot.send_message(message.chat.id, "–ö—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –ø—Ä–æ–¥—É–∫—Ç? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '–ú–∞–≥–∞–∑–∏–Ω'):", reply_markup=back_skip_markup)
            elif previous_state == "waiting_for_expiration_date":
                user_data['state']="waiting_for_manufacture_date"
                write_json(config_data['users'], user_data)
                await bot.send_message(
                    message.chat.id, 
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ:", 
                    reply_markup=calendar.create_calendar(calendar_1.prefix, datetime.datetime.now().year, datetime.datetime.now().month)
                )
            else:
                user_data['state']="start"
                write_json(config_data['users'], user_data)
                await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=start_markup)
            
        except Exception:
            user_data['state']="start"
            write_json(config_data['users'], user_data)
            await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=start_markup)

    @bot.message_handler(func=lambda message: message.text == "–†–∞–Ω–¥–æ–º–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç")
    @check_user_state(bot)
    async def handle_random_product(message):
        await bot.send_message(message.chat.id, "–í–æ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –≤–∞—à–µ–≥–æ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞!")

    @bot.message_handler(func=lambda message: message.text == "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥–∞—Ç—á–∏–∫–∞ –≤–µ—Å–∞")
    @check_user_state(bot)
    async def handle_weight_sensor(message):
        await bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥—Ä–æ–ø–∞—Ç—å?", reply_markup=drop_markup)
        # –ß—Ç–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON
        users = read_json(config_data['users'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ JSON
        user_id = str(message.from_user.id)  # IDs –≤ JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
        if user_id in users:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            users[user_id]['state'] = "preparing_to_drop_food"
            write_json(config_data['users'], users)
            
        else:
            await bot.send_message(message.chat.id, "–¢–æ–ª—å–∫–æ —Ñ–∏–≥ –≤–∞–º –≤ –æ–±–µ —Ä—É–∫–∏: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    @bot.message_handler(func=lambda message: find_user_with_correct_state(message.from_user.id, "preparing_to_drop_food"))
    @check_user_state(bot)
    def register_product(message):
        try:
            num = int(message.text)
        except:
            pass
        finally:
            users = read_json(config_data['users'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ JSON
            user_id = str(message.from_user.id)  # IDs –≤ JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
            if user_id in users:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                users[user_id]['state'] = "dropping_food"
                write_json(config_data['users'], users)
            
    @bot.message_handler(func=lambda message: find_user_with_correct_state(message.from_user.id, "dropping_food") and message.text.isdigit())
    @check_user_state(bot)
    async def drop_food(message):
        #print(message.chat.id, ' -> message.chat.id')
        #print(message.from_user.id, ' -> message.from_user.id')
        #print(message.message_id, ' -> message.message.id')
        try:
            num = int(message.text)
            for _ in range(num):
                random_weight = get_random_weight(100,1100)
                product_id = add_new_weight_change(random_weight, message.chat.id, message.message_id)
                msg = (
                "üì¶ ***–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç!***\n\n"
                f"üìä **–í–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞:** {random_weight} –≥\n"
                "‚ùì –ö—Ç–æ-—Ç–æ –ø–æ–ª–æ–∂–∏–ª —ç—Ç–æ –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫, –Ω–æ –º—ã –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞–µ–º, —á—Ç–æ —ç—Ç–æ.\n\n"
                "üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç."
            )
                markup = create_product_markup(product_id)
                await bot.send_message(
                    message.chat.id,
                    msg,
                    reply_markup=markup,
                    parse_mode="Markdown"
                )

        except:
            print(traceback.print_exc())

    @bot.message_handler(func=lambda message: message.text == "–ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤")
    @check_user_state(bot)
    async def start_interactive(message):
        interactive_state.on_next(True)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–æ–∫–∞
        await bot.send_message(message.chat.id, "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤ –Ω–∞—á–∞–ª—Å—è! –í—Å–µ –∂–µ–ª–∞—é—â–∏–µ –º–æ–≥—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.", reply_markup=admin_markup)

    @bot.message_handler(func=lambda message: message.text == "–ù–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç" and find_user_with_correct_state(message.from_user.id, "adding_food"))
    @check_user_state(bot)
    async def register_product(message):
        await start_adding_food(bot, message)

    @bot.message_handler(func=lambda message: message.text == "–ù–∞–π–¥–∏ –ø—Ä–æ—Å—Ä–æ—á–∫—É")
    @check_user_state(bot)
    async def check_expiration(message):
        await bot.send_message(message.chat.id, "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –í –±—É–¥—É—â–µ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º —Å—Ä–æ–∫–æ–º –≥–æ–¥–Ω–æ—Å—Ç–∏.")

    @bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç")
    @check_user_state(bot)
    async def delete_product(message):
        await bot.send_message(message.chat.id, "–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

    @bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–æ–≤–µ—Ç—É–π –≤–∫—É—Å–Ω—è—à–∫—É")
    @check_user_state(bot)
    async def suggest_food(message):
        await bot.send_message(message.chat.id, "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –í –±—É–¥—É—â–µ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —á—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å.")

    @bot.message_handler(func=lambda message: read_json(config_data['users'])[str(message.chat.id)]['state'].startswith("waiting_for_expiration_date"))
    @check_user_state(bot)
    async def get_food_expiration_date(message):
        if message.text == "–ù–∞–∑–∞–¥":
            go_back(message)
            return
        else:
            if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
                product = registration_sessions["product"]
                registration_sessions["expiry_date"] = product["manufacture_date"] + datetime.timedelta(days=3)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 –¥–Ω—è
                registration_sessions["state"] = "final_check"
                await send_product_summary(message.chat.id, product)
                return

        try:
            days = int(message.text)
            product = registration_sessions["product"]
            registration_sessions["expiry_date"] = product["manufacture_date"] + datetime.timedelta(days=days)
            registration_sessions["state"] = "final_check"
            await send_product_summary(message.chat.id, product)
        except ValueError:
            await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –¥–Ω—è—Ö –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")


    @bot.message_handler(func=lambda message: read_json(config_data['users'])[str(message.chat.id)]['state'].startswith("final_check"))
    @check_user_state(bot)
    async def finalize_product(message):
        if message.text == "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å":
            user_data = user_state_manager.get_current_state(message.chat.id)
            if user_data:
                product = user_data["product"]
                data = read_json()
                data.append(product)
                write_json(config_data['fridge'], data, True)
                await bot.send_message(message.chat.id, "–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=start_markup)
                products_stream.on_next(read_json(config_data['users'])[str(message.chat.id)].get("product_id"), "registered")
        elif message.text == "–°–±—Ä–æ—Å":
            await bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã.", reply_markup=start_markup)


    @bot.message_handler(func=lambda message: read_json(config_data['users'])[str(message.chat.id)]['state'].startswith("registering_product"))
    async def finalize_registration(message):
        product_id = registration_sessions[message.chat.id].get("product_id")
        product = registration_sessions

        if product and product["user_id"] == message.from_user.id:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            product["status"] = "registered"
            write_json(config_data['new_products'], product["status"])
            products_stream.on_next((product_id, "registered"))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            await bot.send_message(message.chat.id, "–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
            await notify_others_about_product(product_id, message.from_user.id)
        else:
            await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    @bot.message_handler(func=lambda message: read_json(config_data['users'])[str(message.chat.id)]['state'].startswith("waiting_for_name"))
    @check_user_state(bot)
    async def get_food_name(message):
        product = read_json(config_data['users'])[str(message.chat.id)]['state'].split(SEPARATOR)[-1]
        user_data = read_json(config_data['users'])[str(message.chat.id)]
        if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            bot.send_message(message.chat.id, "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ–ª—å–∑—è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
            return
        if message.text == "–ù–∞–∑–∞–¥":
            user_data['state']="start"
            write_json(config_data['users'], user_data)
            await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=start_markup)
            return 
        else:
            s = load_storage_tmp()
            s[product]["name"] = message.text
            user_data['state'] = "waiting_for_categories"
            cats = find_categories_fuzzy(message.text, config_data['dishes'])
            s[product]['categories'] = cats
            save_storage_tmp(s)
            write_json(config_data['users'], user_data)

            await bot.send_message(message.chat.id, f"–î–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {message.text} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {cats}. –ò—Ö –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–∞–º–æ–º—É (–Ω–∞–ø–µ—á–∞—Ç–∞–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏ –æ—Ç–ø—Ä–∞–≤–∏–≤), –∞ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å (–∫–Ω–æ–ø–∫–∞ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å)", reply_markup=back_skip_markup)

    @bot.message_handler(func=lambda message: read_json(config_data['users'])[str(message.chat.id)]['state'].startswith("waiting_for_categories"))
    @check_user_state(bot)
    async def get_food_cats(message):
        if message.text == "–ù–∞–∑–∞–¥":
            await go_back(message)
            return
        else:
            if message.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
                my_utils.data_loaders.storage_tmp["product"]["categories"] = message.text.split(",")
                await bot.send_message(message.chat.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
                user_data = read_json(config_data['users'])[str(message.chat.id)]
                user_data['state']="waiting_for_weight"
                write_json(config_data['users'], user_data)
            
            await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞ (–≥—Ä–∞–º–º—ã) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=back_skip_markup)

    @bot.message_handler(func=lambda message: my_utils.data_loaders.storage_tmp.get(message.from_user.id, {}).get('state') == "waiting_for_tare_weight")
    @check_user_state(bot)
    async def get_food_weight(message):
        if message.text == "–ù–∞–∑–∞–¥":
            await go_back(message)
            return
        else:
            if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
                user_state_manager.set_state(message.chat.id, "waiting_for_tare_weight")
                await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å —Ç–∞—Ä—ã (–≥—Ä–∞–º–º—ã) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=back_skip_markup)
                return

        try:
            weight = int(message.text)
            registration_sessions["product"]["weight"] = weight
            user_state_manager.set_state(message.chat.id, "waiting_for_tare_weight")
            await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å —Ç–∞—Ä—ã (–≥—Ä–∞–º–º—ã) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=back_skip_markup)
        except ValueError:
            await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")

    @bot.message_handler(func=lambda message: storage_tmp.get(message.from_user.id, {}).get('state') == "waiting_for_weight")
    @check_user_state(bot)
    async def get_food_tare_weight(message):
        if message.text == "–ù–∞–∑–∞–¥":
            await go_back(message)
            return
        else:
            if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
                user_state_manager.set_state(message.chat.id, "waiting_for_source")
                await bot.send_message(message.chat.id, "–ö—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –ø—Ä–æ–¥—É–∫—Ç? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '–ú–∞–≥–∞–∑–∏–Ω') –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=back_skip_markup)
                return

        try:
            tare_weight = int(message.text)
            registration_sessions["product"]["tare_weight"] = tare_weight
            user_state_manager.set_state(message.chat.id, "waiting_for_source")
            await bot.send_message(message.chat.id, "–ö—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –ø—Ä–æ–¥—É–∫—Ç? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '–ú–∞–≥–∞–∑–∏–Ω') –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=back_skip_markup)
        except ValueError:
            await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å —Ç–∞—Ä—ã –≤ –≥—Ä–∞–º–º–∞—Ö –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")

    @bot.message_handler(func=lambda message: storage_tmp.get(message.from_user.id, {}).get('state') == "waiting_for_source")
    @check_user_state(bot)
    async def get_food_source(message):
        if message.text == "–ù–∞–∑–∞–¥":
            await go_back(message)
            return
        else:
            if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
                user_state_manager.set_state(message.chat.id, "waiting_for_manufacture_date")
                await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=calendar.create_calendar(calendar_1.prefix, datetime.datetime.now().year, datetime.datetime.now().month))
                return

        registration_sessions["product"]["source"] = message.text if message.text else "–ú–∞–≥–∞–∑–∏–Ω"
        user_state_manager.set_state(message.chat.id, "waiting_for_manufacture_date")
        await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=calendar.create_calendar(calendar_1.prefix, datetime.datetime.now().year, datetime.datetime.now().month))
