from config import *
from utils import find_categories_fuzzy, find_emoji_fuzzy, get_random_weight
from rx import operators as ops
import uuid
from telebot import TeleBot, types
import datetime

from telebot import TeleBot


bot = TeleBot(bot_token)







@bot.message_handler(func=lambda message: USER_STATE.get(message.chat.id, {}).get("state") == "waiting_for_name")
@check_user_state()
def get_food_name(message):
    if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        bot.send_message(message.chat.id, "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ–ª—å–∑—è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return
    user_data = USER_STATE[message.chat.id]
    if message.text == "–ù–∞–∑–∞–¥":
        USER_STATE[message.chat.id]["state"] = "start"
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=start_markup)
        return 
    else:
        user_data["product"]["name"] = message.text
        user_data["state"] = "waiting_for_categories"
        cats = find_categories_fuzzy(message.text, dish_categories)
        user_data['product']['categories'] = cats
        bot.send_message(message.chat.id, f"–î–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {message.text} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {cats}. –ò—Ö –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–∞–º–æ–º—É (–Ω–∞–ø–µ—á–∞—Ç–∞–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏ –æ—Ç–ø—Ä–∞–≤–∏–≤), –∞ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å (–∫–Ω–æ–ø–∫–∞ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å)", reply_markup=back_skip_markup)

@bot.message_handler(func=lambda message: USER_STATE.get(message.chat.id, {}).get("state") == "waiting_for_categories")
@check_user_state()
def get_food_cats(message):
    if message.text == "–ù–∞–∑–∞–¥":
        go_back(message)
        return
    else:
        user_data = USER_STATE[message.chat.id]
        if message.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            user_data["product"]["categories"] = message.text.split(",")
            bot.send_message(message.chat.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
        user_data["state"] = "waiting_for_weight"
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞ (–≥—Ä–∞–º–º—ã) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=back_skip_markup)

@bot.message_handler(func=lambda message: USER_STATE.get(message.chat.id, {}).get("state") == "waiting_for_weight")
@check_user_state()
def get_food_weight(message):
    if message.text == "–ù–∞–∑–∞–¥":
        go_back(message)
        return
    else:
        user_data = USER_STATE[message.chat.id]
        if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            user_data["state"] = "waiting_for_tare_weight"
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å —Ç–∞—Ä—ã (–≥—Ä–∞–º–º—ã) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=back_skip_markup)
            return

    try:
        weight = int(message.text)
        user_data["product"]["weight"] = weight
        user_data["state"] = "waiting_for_tare_weight"
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å —Ç–∞—Ä—ã (–≥—Ä–∞–º–º—ã) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=back_skip_markup)
    except ValueError:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")

@bot.message_handler(func=lambda message: USER_STATE.get(message.chat.id, {}).get("state") == "waiting_for_tare_weight")
@check_user_state()
def get_food_tare_weight(message):
    if message.text == "–ù–∞–∑–∞–¥":
        go_back(message)
        return
    else:
        user_data = USER_STATE[message.chat.id]
        if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            user_data["state"] = "waiting_for_source"
            bot.send_message(message.chat.id, "–ö—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –ø—Ä–æ–¥—É–∫—Ç? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '–ú–∞–≥–∞–∑–∏–Ω') –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=back_skip_markup)
            return

    try:
        tare_weight = int(message.text)
        user_data["product"]["tare_weight"] = tare_weight
        user_data["state"] = "waiting_for_source"
        bot.send_message(message.chat.id, "–ö—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –ø—Ä–æ–¥—É–∫—Ç? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '–ú–∞–≥–∞–∑–∏–Ω') –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=back_skip_markup)
    except ValueError:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å —Ç–∞—Ä—ã –≤ –≥—Ä–∞–º–º–∞—Ö –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")

@bot.message_handler(func=lambda message: USER_STATE.get(message.chat.id, {}).get("state") == "waiting_for_source")
@check_user_state()
def get_food_source(message):
    if message.text == "–ù–∞–∑–∞–¥":
        go_back(message)
        return
    else:
        user_data = USER_STATE[message.chat.id]
        if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            user_data["state"] = "waiting_for_manufacture_date"
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=calendar.create_calendar(calendar_1.prefix, datetime.datetime.now().year, datetime.datetime.now().month))
            return

    user_data["product"]["source"] = message.text if message.text else "–ú–∞–≥–∞–∑–∏–Ω"
    user_data["state"] = "waiting_for_manufacture_date"
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=calendar.create_calendar(calendar_1.prefix, datetime.datetime.now().year, datetime.datetime.now().month))

@bot.callback_query_handler(func=lambda call: call.data.startswith(calendar_1.prefix))
@check_user_state()
def get_food_manufacture_date(call):
    user_data = USER_STATE.get(call.message.chat.id)
    if not user_data or user_data["state"] != "waiting_for_manufacture_date":
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞.")
        return

    name, action, year, month, day = call.data.split(calendar_1.sep)
    if action == "DAY":
        chosen_date = datetime.date(int(year), int(month), int(day))
        user_data["product"]["manufacture_date"] = chosen_date
        user_data["state"] = "waiting_for_expiration_date"
        bot.send_message(call.message.chat.id, f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {chosen_date}. –£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è (–¥–Ω–∏) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=back_skip_markup)

def get_summary(product, category_emoji, title):
    return (
        title,
        f"üìå **–ù–∞–∑–≤–∞–Ω–∏–µ:** {product['name']}\n"
        f"{category_emoji} **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {product['categories']}\n"
        f"‚öñÔ∏è **–í–µ—Å:** {product['weight']} –≥\n"
        f"üì¶ **–í–µ—Å —Ç–∞—Ä—ã:** {product['tare_weight']} –≥\n"
        f"üè∑Ô∏è **–ò—Å—Ç–æ—á–Ω–∏–∫ (–∫—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª):** {product['source']}\n"
        f"üìÖ **–î–∞—Ç–∞ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:** {product['manufacture_date'].strftime('%d.%m.%Y')}\n"
        f"‚è≥ **–ì–æ–¥–µ–Ω –¥–æ:** {product['expiry_date'].strftime('%d.%m.%Y')}\n"
    )

def send_product_summary(chat_id, product):
    category_emoji = find_emoji_fuzzy(product["categories"])
    summary = get_summary(product,category_emoji, title="üìù **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞:**\n")
    bot.send_message(chat_id, summary, parse_mode="Markdown", reply_markup=check_markup)

@bot.message_handler(func=lambda message: USER_STATE.get(message.chat.id, {}).get("state") == "waiting_for_expiration_date")
@check_user_state()
def get_food_expiration_date(message):
    if message.text == "–ù–∞–∑–∞–¥":
        go_back(message)
        return
    else:
        user_data = USER_STATE[message.chat.id]
        if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            product = user_data["product"]
            product["expiry_date"] = product["manufacture_date"] + datetime.timedelta(days=3)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 –¥–Ω—è
            user_data["state"] = "final_check"
            send_product_summary(message.chat.id, product)
            return

    try:
        days = int(message.text)
        product = user_data["product"]
        product["expiry_date"] = product["manufacture_date"] + datetime.timedelta(days=days)
        user_data["state"] = "final_check"
        send_product_summary(message.chat.id, product)
    except ValueError:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –¥–Ω—è—Ö –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")


@bot.message_handler(func=lambda message: USER_STATE.get(message.chat.id, {}).get("state") == "final_check")
@check_user_state()
def finalize_product(message):
    if message.text == "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å":
        user_data = USER_STATE.pop(message.chat.id, None)
        if user_data:
            product = user_data["product"]
            data = read_json()
            data.append(product)
            write_json(fridge, data)
            bot.send_message(message.chat.id, "–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=start_markup)
            products_stream.on_next(USER_STATE[message.chat.id].get("product_id"), "registered")
    elif message.text == "–°–±—Ä–æ—Å":
        USER_STATE.pop(message.chat.id, None)
        bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã.", reply_markup=start_markup)

def notify_others_about_product(product_id, registering_user_id):
    product = read_new_products().get(product_id)
    if not product:
        return  # –ü—Ä–æ–¥—É–∫—Ç —É–∂–µ —É–¥–∞–ª–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

    # –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_data = read_users()
    user_ids = [int(user_id) for user_id in user_data.keys()]

    # –ò—Å–∫–ª—é—á–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_ids = [user_id for user_id in user_ids if user_id != registering_user_id]
    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    product_info = get_summary(product,find_emoji_fuzzy(product["categories"]), title=f"‚úÖ –ù–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É!\n")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for user_id in user_ids:
        try:
            bot.send_message(user_id, product_info)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

@bot.message_handler(func=lambda message: USER_STATE.get(message.chat.id, {}).get("state") == "registering_product")
def finalize_registration(message):
    product_id = USER_STATE[message.chat.id].get("product_id")
    product = read_new_products().get(product_id)

    if product and product["user_id"] == message.from_user.id:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        product["status"] = "registered"
        write_products(product["status"])
        products_stream.on_next((product_id, "registered"))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        bot.send_message(message.chat.id, "–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
        notify_others_about_product(product_id, message.from_user.id)
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@bot.message_handler(func=lambda message: message.text == "–ù–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç" or USER_STATE[message.chat.id]['state'] == 'adding_food')
@check_user_state()
def register_product(message):
    start_adding_food(message)

@bot.message_handler(func=lambda message: message.text == "–ù–∞–π–¥–∏ –ø—Ä–æ—Å—Ä–æ—á–∫—É")
@check_user_state()
def check_expiration(message):
    bot.send_message(message.chat.id, "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –í –±—É–¥—É—â–µ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º —Å—Ä–æ–∫–æ–º –≥–æ–¥–Ω–æ—Å—Ç–∏.")

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç")
@check_user_state()
def delete_product(message):
    bot.send_message(message.chat.id, "–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–æ–≤–µ—Ç—É–π –≤–∫—É—Å–Ω—è—à–∫—É")
@check_user_state()
def suggest_food(message):
    bot.send_message(message.chat.id, "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –í –±—É–¥—É—â–µ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —á—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å.")

def read_users():
    try:
        with open(users, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def write_users(data):
    try:
        with open(users, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")



@bot.message_handler(func=lambda message: message.text == "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥–∞—Ç—á–∏–∫–∞ –≤–µ—Å–∞")
@check_user_state()
def handle_weight_sensor(message):
    user_data = read_users()
    user_data[str(message.chat.id)]['state'] = 'dropping_food'
    write_users(user_data)
    bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥—Ä–æ–ø–∞—Ç—å?", reply_markup=drop_markup)


def add_new_weight_change(weight, chat_id):
    product_id = str(uuid.uuid4())
    timestamp = datetime.datetime.now()
    products = read_new_products()
    if products is None:
        products = {}
    products[product_id] = {
        "weight": weight,
        "status": "waiting",  # waiting, in_progress, registered
        "user_id": None,
        "timestamp": timestamp,
        "message_id": None,  # ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        "chat_id": chat_id
    }
    write_products(products)
    products_stream.on_next((product_id, "waiting"))

    return product_id


@bot.callback_query_handler(func=lambda call: call.data.startswith("register:"))
def register_product(call):
    try:
        product_id = call.data.split(":")[1]
        product = read_new_products().get(product_id)

        if not product:
            bot.answer_callback_query(call.id, "–ü—Ä–æ–¥—É–∫—Ç –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return

        if product["status"] == "in_progress":
            bot.answer_callback_query(call.id, "–≠—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.")
            return

        if product["status"] == "registered":
            bot.answer_callback_query(call.id, "–≠—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
            return

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è
        product["status"] = "in_progress"
        product["user_id"] = call.from_user.id
        write_products(product)
        products_stream.on_next((product_id, "in_progress"))

        bot.answer_callback_query(call.id)
        USER_STATE[call.message.chat.id]['state'] = "adding_food"
        bot.send_message(call.message.chat.id, "–í—ã –Ω–∞—á–∞–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –≤–≤–µ—Å—Ç–∏ –∏–º—è –ø—Ä–æ–¥—É–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å")
    except Exception as e:
        print(e)
        bot.send_message(call.message.chat.id, "–ë–æ—Ç –Ω–µ –∑–Ω–∞–µ—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å(((")

@bot.message_handler(func=lambda message: read_users()[str(message.chat.id)]['state'] == "dropping_food")
@check_user_state()
def drop_food(message):
    num = int(message.text)
    products = read_new_products()
    for _ in range(num):
        random_weight = get_random_weight(100,1100)
        product_id = add_new_weight_change(random_weight, message.chat.id)
        msg = (
        "üì¶ ***–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç!***\n\n"
        f"üìä **–í–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞:** {random_weight} –≥\n"
        "‚ùì –ö—Ç–æ-—Ç–æ –ø–æ–ª–æ–∂–∏–ª —ç—Ç–æ –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫, –Ω–æ –º—ã –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞–µ–º, —á—Ç–æ —ç—Ç–æ.\n\n"
        "üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç."
    )
        markup = create_product_markup(product_id)
        bot.send_message(
            message.chat.id,
            msg,
            reply_markup=markup,
            parse_mode="Markdown"
        )

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
        if product_id not in products:
            products[product_id] = {
                "weight": 0,  # –ò–ª–∏ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                "status": "waiting",
                "user_id": None,
                "timestamp": datetime.datetime.now().isoformat(),
                "message_id": None,
                "chat_id": None
            }

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
        products[product_id]["message_id"] = message.chat.id

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        write_products(products)




@bot.message_handler(func=lambda message: message.text == "–†–∞–Ω–¥–æ–º–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç")
@check_user_state()
def handle_random_product(message):
    bot.send_message(message.chat.id, "–í–æ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –≤–∞—à–µ–≥–æ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞!")

#–∫–Ω–æ–ø–∫–∞ –ù–ê–ó–ê–î
@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥")
@check_user_state()
def go_back(message):
    try:
        previous_state = USER_STATE.get(message.chat.id, {}).get("state")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ USER_STATE –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞
        if previous_state == "waiting_for_name":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —à–∞–≥—É –≤—ã–±–æ—Ä–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
            USER_STATE[message.chat.id]["state"] = "start"
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=start_markup)
        elif previous_state == "waiting_for_weight":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ –≤–µ—Å–∞
            USER_STATE[message.chat.id]["state"] = "waiting_for_name"
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:", reply_markup=back_skip_markup)
        elif previous_state == "waiting_for_tare_weight":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ –≤–µ—Å–∞ —Ç–∞—Ä—ã
            USER_STATE[message.chat.id]["state"] = "waiting_for_weight"
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞ (–≥—Ä–∞–º–º—ã):", reply_markup=back_skip_markup)
        elif previous_state == "waiting_for_source":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            USER_STATE[message.chat.id]["state"] = "waiting_for_tare_weight"
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å —Ç–∞—Ä—ã (–≥—Ä–∞–º–º—ã):", reply_markup=back_skip_markup)
        elif previous_state == "waiting_for_manufacture_date":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
            USER_STATE[message.chat.id]["state"] = "waiting_for_source"
            bot.send_message(message.chat.id, "–ö—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –ø—Ä–æ–¥—É–∫—Ç? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '–ú–∞–≥–∞–∑–∏–Ω'):", reply_markup=back_skip_markup)
        elif previous_state == "waiting_for_expiration_date":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏
            USER_STATE[message.chat.id]["state"] = "waiting_for_manufacture_date"
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ:", reply_markup=calendar.create_calendar(calendar_1.prefix, datetime.now.year, datetime.now.month))
        else:
            # –ï—Å–ª–∏ —à–∞–≥ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
            USER_STATE[message.chat.id]["state"] = "start"
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=start_markup)

    except:
        # –ï—Å–ª–∏ –≤ —Å—Ç–µ–∫–µ –Ω–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
        USER_STATE[message.chat.id]["state"] = "start"
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=start_markup)
        
products_stream.pipe(
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏ (—Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è)
    ops.map(lambda event: (event[0], read_new_products().get(event[0]))),  # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    ops.filter(lambda event: event[1] is not None),  # –£–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–∏, –∫–æ–≥–¥–∞ –ø—Ä–æ–¥—É–∫—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    ops.filter(lambda event: (datetime.datetime.now() - datetime.datetime.fromisoformat(event[1]["timestamp"])).total_seconds() > 86400),
).subscribe(
    lambda event: notify_and_delete_expired_product(event[0], event[1])
)




products_stream.pipe(
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    ops.filter(lambda event: event[1] == "in_progress"),
    ops.filter(lambda event: event[0] is not None),
).subscribe(lambda event: edit_product_message(event[0], "UPD: –ü—Ä–æ–¥—É–∫—Ç —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç."))

products_stream.pipe(
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    ops.filter(lambda event: event[1] == "registered"),
    ops.filter(lambda event: event[0] is not None),
).subscribe(lambda event: edit_product_message(event[0], "‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!"))

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling()
