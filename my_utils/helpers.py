import configparser
import datetime
from functools import lru_cache
from random import randint
import uuid
from fuzzywuzzy import fuzz, process
from nltk.stem.snowball import RussianStemmer
from bot.editors import edit_product_message
from bot.emoji import CATEGORY_NAMES, CATEGORY_EMOJIS
from bot.markups import back_skip_markup, check_markup

SEPARATOR = " &AMOGUS& "

def find_emoji_fuzzy(dish_name, threshold=70):
    flat_category_names = []
    category_map = {}

    for category, names in CATEGORY_NAMES.items():
        for name in names:
            flat_category_names.append(name)
            category_map[name] = category

    match = process.extractOne(dish_name, flat_category_names, scorer=fuzz.partial_ratio)
    if match and match[1] >= threshold:
        matched_category = category_map[match[0]]
        return CATEGORY_EMOJIS.get(matched_category, CATEGORY_EMOJIS["–ø—Ä–æ—á–µ–µ"])

    return CATEGORY_EMOJIS["–ø—Ä–æ—á–µ–µ"]

@lru_cache(maxsize=1000)
def stem_text(text):
    stemmer = RussianStemmer()
    return stemmer.stem(text)

def find_categories_fuzzy(dish_name, dish_categories, threshold=60, limit=5):
    # –ü—Ä–æ–π–¥–µ–º –ø–æ –≤—Å–µ–º –±–ª—é–¥–∞–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º fuzzywuzzy –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–∏—Ö
    stemmed_dish_name = stem_text(dish_name)
    matches = process.extract(
        stemmed_dish_name,
        [info["all_info"] for info in dish_categories.values()],
        scorer=fuzz.partial_ratio,
        limit=limit
    )

    # –£—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏
    def length_adjusted_score(match):
        match_text, score = match
        length_difference = abs(len(stemmed_dish_name) - len(match_text))
        # –£–º–µ–Ω—å—à–∞–µ–º –æ—Ü–µ–Ω–∫—É –∑–∞ –±–æ–ª—å—à–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –¥–ª–∏–Ω–µ
        adjusted_score = score - length_difference
        return adjusted_score

    # –û—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ü–µ–Ω–∫–∞–º
    matches = sorted(matches, key=length_adjusted_score, reverse=True)

    # –ü—Ä–æ–π–¥–µ–º –ø–æ –≤—Å–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ—Ä–æ–≥—É —Å—Ö–æ–∂–µ—Å—Ç–∏
    for match in matches:
        best_match_info, score = match
        if score >= threshold:
            # –ù–∞–π–¥–µ–º –∫–ª—é—á –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
            best_match_dish = [dish for dish, info in dish_categories.items() if info["all_info"] == best_match_info][0]
            return dish_categories[best_match_dish]["categories"]

    return []

def check_user_state(bot, state=True):
    def decorator(func):
        async def wrapper(message, *args, **kwargs):
            from my_utils.database import read_json
            from my_utils.data_loaders import config_data

            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
            user_data = read_json(config_data["users"])
            user_id = str(message.from_user.id)  # –ü—Ä–∏–≤–æ–¥–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å—Ç—Ä–æ–∫–µ

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å
            if user_id in user_data:
                if user_data[user_id].get("enabled") == state:
                    return await func(message, *args, **kwargs)  # –î–æ–±–∞–≤–ª—è–µ–º await –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º —Ñ—É–Ω–∫—Ü–∏–∏
                else:
                    await bot.send_message(message.chat.id, "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ù–∞–∂–º–∏—Ç–µ /start")
            else:
                await bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ –Ω–∞–∂–º—ë—Ç–µ /start, —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç.")
        
        return wrapper
    return decorator

def check_if_correct_data(data):
    for product in data:
        if isinstance(product.get("manufacture_date"), datetime.date):
            product["manufacture_date"] = product["manufacture_date"].isoformat()
        if isinstance(product.get("expiry_date"), datetime.date):
            product["expiry_date"] = product["expiry_date"].isoformat()
    return data

def notify_and_delete_expired_product(bot, product_id, product):
    from my_utils.database import write_json
    if product:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        
        product.remove(product["product_id"])
        write_json(product)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ
        edit_product_message(bot, product_id, "üí§ –£–∂–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ - –ø—Ä–æ—à–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")

def add_new_weight_change(weight, chat_id, message_id):
    from event_handlers import products_stream
    from my_utils.database import read_json, write_json
    from my_utils.data_loaders import config_data
    product_id = chat_id
    events = read_json(config_data["events"])
    if events is None:
        events = {}
    events[product_id] = {
        "state": "waiting",  # waiting, in_progress, registered
        "chat_id": "???", #to update
        "weight": weight,
        "message_id" : message_id,
        "timestamp" : datetime.datetime.now().isoformat()
    }
    write_json(config_data["events"], events)
    products_stream.on_next((product_id, "waiting", message_id))

    return product_id

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
async def start_adding_food(bot, call, need_msg=True):
    from database import save_storage_tmp, load_storage_tmp
    product_id = call.data.split(SEPARATOR)[-1]  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
    s = load_storage_tmp()
    s[str(product_id)] = {
            "name": "",
            "categories" : [],
            "weight": 0,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "tare_weight": 0,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "source": '–ú–∞–≥–∞–∑–∏–Ω',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "manufacture_date": datetime.date.today().isoformat(),  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–µ–≥–æ–¥–Ω—è
            "expiry_date": None
        }
    save_storage_tmp(s)

    if need_msg:
        await bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:", reply_markup=back_skip_markup)

async def start_adding_food_msg(bot, message, need_msg=True):
    from database import save_storage_tmp, load_storage_tmp, read_json, write_json
    from data_loaders import config_data
    product_id = str(uuid.uuid4())  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
    
    s = load_storage_tmp()
    events = read_json(config_data["events"])
    if events is None:
        events = {}
    events[product_id] = {
        "state": "waiting",  # waiting, in_progress, registered
        "chat_id": "???", #to update
        "weight": 0,
        "message_id" : message.message_id,
        "timestamp" : datetime.datetime.now().isoformat()
    }
    write_json(config_data["events"], events)
    s[str(product_id)] = {
            "name": "",
            "categories" : [],
            "weight": 0,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "tare_weight": 0,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "source": '–ú–∞–≥–∞–∑–∏–Ω',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "manufacture_date": datetime.date.today().isoformat(),  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–µ–≥–æ–¥–Ω—è
            "expiry_date": None
        }
    save_storage_tmp(s)

    if need_msg:
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:", reply_markup=back_skip_markup)
    return product_id


async def notify_others_about_product(bot, product_id, registering_user_id):
        from my_utils.database import read_json
        from data_loaders import config_data
        product = read_json(config_data['storage_tmp']).get(product_id)
        if not product:
            return  # –ü—Ä–æ–¥—É–∫—Ç —É–∂–µ —É–¥–∞–ª–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

        # –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_data = read_json(config_data['users'])
        user_ids = [int(user_id) for user_id in user_data.keys()]

        # –ò—Å–∫–ª—é—á–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_ids = [user_id for user_id in user_ids if user_id != registering_user_id]
        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        product_info = get_summary(product,find_emoji_fuzzy(product["categories"]), title=f"‚úÖ –ù–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É!\n")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        for user_id in user_ids:
            try:
                await bot.send_message(user_id, product_info)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
def get_random_weight(a,b):
    return randint(a, b)

def get_summary(product, category_emoji, title):
    msg =""
    msg +=title
    msg +=f"üìå **–ù–∞–∑–≤–∞–Ω–∏–µ:** {product["name"]}\n"
    msg +=   f'{category_emoji} **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {product["categories"]}\n'
    msg +=   f'‚öñÔ∏è **–í–µ—Å:** {product["weight"]} –≥\n'
    msg +=   f'üì¶ **–í–µ—Å —Ç–∞—Ä—ã:** {product["tare_weight"]} –≥\n'
    msg +=   f'üè∑Ô∏è **–ò—Å—Ç–æ—á–Ω–∏–∫ (–∫—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª):** {product["source"]}\n'
    msg +=   f'üìÖ **–î–∞—Ç–∞ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:** {datetime.datetime.fromisoformat(product["manufacture_date"]).strftime('%d.%m.%Y')}\n'
    msg +=   f'‚è≥ **–ì–æ–¥–µ–Ω –¥–æ:** {datetime.datetime.fromisoformat(product["expiry_date"]).strftime("%d.%m.%Y")}\n'
    return msg
    

async def send_product_summary(bot, chat_id, product):
    from database import load_storage_tmp, read_json,write_json
    from data_loaders import config_data
    s = load_storage_tmp()
    category_emoji = find_emoji_fuzzy(s[product]["categories"])
    summary = get_summary(s[product],category_emoji, title="üìù **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞:**\n\n")
    
    user_data = read_json(config_data['users'])
    user_data[str(chat_id)]["state"] = "final_check"+SEPARATOR+product
    write_json(config_data['users'], user_data)
    await bot.send_message(chat_id, summary, parse_mode="Markdown", reply_markup=check_markup)

def create_config():
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç ConfigParser
    config = configparser.ConfigParser()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —Å–µ–∫—Ü–∏–π
    config["DEFAULT"] = {
        "fridge": "data/fridge_data.json",
        "users": "data/users.json",
        "interactive": "data/state.json",
        "dishes": "data/dishes.txt",
        "events" : "data/events.json",
        "storage_tmp" : "data/storage_tmp.json"
    }
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª
    with open("config.ini", "w") as configfile:
        config.write(configfile)

def read_config():
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç ConfigParser
    config = configparser.ConfigParser()

    # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞
    config.read("config.ini")

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å
    config_data = dict(config["DEFAULT"])

    return config_data

def find_user_with_correct_state(id, state):
    from data_loaders import config_data
    from database import read_json
    try:
        users = read_json(config_data["users"])
        user = users[str(id)]
        if user:
            return user["state"] == state
        else:
            return False
    except Exception as e:
        print(e)
