import datetime
from random import randint
import uuid
from fuzzywuzzy import fuzz
from fuzzywuzzy import process
from nltk.stem.snowball import RussianStemmer
from config import USER_STATE
from json_database import write_json, read_json
from handlers.editors import edit_product_message
from markups import back_skip_markup

CATEGORY_EMOJIS = {
    "–æ–≤–æ—â": "ü•¶",    # –û–≤–æ—â–∏
    "–º–æ–ª–æ—á": "ü•õ",   # –ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    "–º—è—Å–æ": "üçñ",    # –ú—è—Å–æ
    "—Ä—ã–±–∞": "üêü",    # –†—ã–±–∞
    "—Ñ—Ä—É–∫—Ç": "üçé",   # –§—Ä—É–∫—Ç—ã
    "–≤—ã–ø–µ—á–∫–∞": "ü•ê", # –í—ã–ø–µ—á–∫–∞
    "—Ö–ª–µ–±": "üçû",    # –•–ª–µ–±
    "–ø—Ä–æ—á–µ–µ": "üçΩÔ∏è"  # –ü—Ä–æ—á–µ–µ
}

CATEGORY_NAMES = {
    "–æ–≤–æ—â": ["–æ–≤–æ—â", "–æ–≤–æ—â–Ω–æ–π", "–æ–≤–æ—â–Ω–∞—è", "–æ–≤–æ—â–∏", "–æ–≤–æ—â–Ω–æ–µ", "–æ–≤–æ—â–Ω—ã–µ"],
    "–º–æ–ª–æ–∫–æ": ["–º–æ–ª–æ—á–Ω—ã–π", "–º–æ–ª–æ—á–Ω–æ–µ", "–º–æ–ª–æ—á–Ω—ã–µ"],
    "–º—è—Å–æ": ["–º—è—Å–æ", "–º—è—Å–Ω–æ–π", "–º—è—Å–Ω—ã–µ", "–º—è—Å–Ω–æ–µ"],
    "—Ä—ã–±–∞": ["—Ä—ã–±–∞", "—Ä—ã–±–Ω—ã–π", "—Ä—ã–±–Ω—ã–µ", "—Ä—ã–±–Ω–æ–µ"],
    "—Ñ—Ä—É–∫—Ç": ["—Ñ—Ä—É–∫—Ç", "—Ñ—Ä—É–∫—Ç—ã", "—Ñ—Ä—É–∫—Ç–æ–≤—ã–π"],
    "–≤—ã–ø–µ—á–∫–∞": ["–≤—ã–ø–µ—á–∫–∞", "–≤—ã–ø–µ—á–µ–Ω–Ω—ã–µ", "–ø–µ—á—ë–Ω–æ–µ"],
    "—Ö–ª–µ–±": ["—Ö–ª–µ–±", "—Ö–ª–µ–±–Ω—ã–π", "—Ö–ª–µ–±–Ω–∞—è", "—Ö–ª–µ–±–Ω–æ–µ"],
}

def get_random_weight(a,b):
    return randint(a, b)

def find_categories_fuzzy(dish_name, dish_categories, threshold=70, limit=5):
    # –ü—Ä–æ–π–¥–µ–º –ø–æ –≤—Å–µ–º –±–ª—é–¥–∞–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º fuzzywuzzy –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–∏—Ö
    stemmer = RussianStemmer()
    stemmed_dish_name = stemmer.stem(dish_name)
    matches = process.extract(
        stemmed_dish_name,
        [info["all_info"] for info in dish_categories.values()],
        scorer=fuzz.partial_ratio,
        limit=limit
    )

    # –£—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏
    def length_adjusted_score(match):
        match_text, score = match
        length_difference = abs(len(stemmed_dish_name) - len(match_text))
        # –£–º–µ–Ω—å—à–∞–µ–º –æ—Ü–µ–Ω–∫—É –∑–∞ –±–æ–ª—å—à–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –¥–ª–∏–Ω–µ
        adjusted_score = score - length_difference
        return adjusted_score

    # –û—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ü–µ–Ω–∫–∞–º
    matches = sorted(matches, key=length_adjusted_score, reverse=True)

    # –ü—Ä–æ–π–¥–µ–º –ø–æ –≤—Å–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ—Ä–æ–≥—É —Å—Ö–æ–∂–µ—Å—Ç–∏
    for match in matches:
        best_match_info, score = match
        if score >= threshold:
            # –ù–∞–π–¥–µ–º –∫–ª—é—á –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
            best_match_dish = [dish for dish, info in dish_categories.items() if info["all_info"] == best_match_info][0]
            return dish_categories[best_match_dish]["categories"]

    return []


def find_emoji_fuzzy(dish_name, threshold=70):
    # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞
    flat_category_names = []
    category_map = {}

    for category, names in CATEGORY_NAMES.items():
        for name in names:
            flat_category_names.append(name)
            category_map[name] = category

    # –ò—â–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    match = process.extractOne(dish_name, flat_category_names, scorer=fuzz.partial_ratio)
    if match and match[1] >= threshold:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏
        matched_category = category_map[match[0]]
        return CATEGORY_EMOJIS.get(matched_category, CATEGORY_EMOJIS["–ø—Ä–æ—á–µ–µ"])

    return CATEGORY_EMOJIS["–ø—Ä–æ—á–µ–µ"]

def check_if_correct_data(data):
    for product in data:
        if isinstance(product.get("manufacture_date"), datetime.date):
            product["manufacture_date"] = product["manufacture_date"].isoformat()
        if isinstance(product.get("expiry_date"), datetime.date):
            product["expiry_date"] = product["expiry_date"].isoformat()
    return data

def notify_and_delete_expired_product(product_id, product):
    if product:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        
        product.remove(product["product_id"])
        write_json(product)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ
        edit_product_message(product_id, "üí§ –£–∂–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ - –ø—Ä–æ—à–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
def start_adding_food(bot, message):
    product_id = str(uuid.uuid4())  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
    USER_STATE[message.chat.id] = {
        "state": "waiting_for_name",
        "product": {
            "id": product_id,
            "name": "",
            "categories" : [],
            "weight": 0,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "tare_weight": 0,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "source": "–ú–∞–≥–∞–∑–∏–Ω",  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "manufacture_date": datetime.date.today(),  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–µ–≥–æ–¥–Ω—è
            "expiry_date": None,
        }
    }
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:", reply_markup=back_skip_markup)

def check_user_state(state=True):
    def decorator(bot, func):
        def wrapper(message, *args, **kwargs):
            user_data = read_json()  # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
            user_id = str(message.from_user.id)  # –ü—Ä–∏–≤–æ–¥–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å—Ç—Ä–æ–∫–µ
            if user_id in user_data:
                if user_data[user_id].get('enabled') == state:
                    return func(message, *args, **kwargs)  # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                else:
                    bot.send_message(message.chat.id, "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
            else:
                bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ –Ω–∞–∂–º—ë—Ç–µ /start, —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç.")
        return wrapper
    return decorator